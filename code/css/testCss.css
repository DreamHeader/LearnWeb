body{
    font-size: 100%;
}
/* CSS背景 */
/* CSS 允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果。
CSS 在这方面的能力远远在 HTML 之上。 */
p{
    background-color: aquamarine;
    padding: 20px; 
    text-align: center;
    justify-content: center;
    word-spacing: 0cm;
}
/* CSS 文本 */
/* CSS 提供了 text-indent 属性，该属性可以方便地实现文本缩进。 */
/* 注意：一般来说，可以为所有块级元素应用 text-indent，
但无法将该属性应用于行内元素，图像之类的替换元素上也无法应用 text-indent 属性。
不过，如果一个块级元素（比如段落）的首行中有一个图像，它会随该行的其余文本移动。 */
/* text-indent 可以使用所有长度单位，包括百分比值。 */
#pCss{
    color: blue;
    word-spacing: 0.5em;
    /* letter-spacing: 0.5em; */
     /* text-indent: -5em;
     padding-left: 5em; */
}
/* 文本装饰
接下来，我们讨论 text-decoration 属性，这是一个很有意思的属性，它提供了很多非常有趣的行为。
text-decoration 有 5 个值：
none
underline
overline
line-through
blink */
.textDecorationUnderline{
    text-decoration: underline;
}
.textDecorationOverline{
    text-decoration: overline;
}
.textDecorationLine-through{
    text-decoration: line-through;
}
.textDecorationUnderlineOverline{
    text-decoration: underline overline;
}
/* 处理空白符 */
/* white-space 属性 */

/* 值 pre
不过，如果将 white-space 设置为 pre，受这个属性影响的元素中
，空白符的处理就有所不同，其行为就像 XHTML 的 pre 元素一样；空白符不会被忽略。
如果 white-space 属性的值为 pre，浏览器将会注意额外的空格，
甚至回车。在这个方面，而且仅在这个方面，任何元素都可以相当于一个 pre 元素。
经测试，IE 7 以及更早版本的浏览器不支持该值 */

/* 值 nowrap
与之相对的值是 nowrap，它会防止元素中的文本换行，除非使用了一个 br 元素。
在 CSS 中使用 nowrap 非常类似于 HTML 4 中用
 <td nowrap> 将一个表单元格设置为不能换行，不过 white-space 值可以应用到任何元素。 */

 /* pre-wrap */
 /* 如果元素的 white-space 设置为 pre-wrap，那么该元素中的文本会保留空白符序列
 ，但是文本行会正常地换行。如果设置为这个值，源文本中的行分隔符以及生成的行分隔符也会保留 */

 /* pre-line */
 /* pre-line 与 pre-wrap 相反，会像正常文本中一样合并空白符序列，但保留换行符。 */

/* ---------------------------**********************************------------ */
 /* CSS 字体 */

p.fontFamily{
   font-family: sans-serif;   
   color: blue;   
}
h1.fontFamily{
    font-family: Georgia, serif;
}
p.fonStyle{
    /* font-style: normal; */
    /* font-style: italic; */
    font-style: oblique;
    /* italic 和 oblique 的区别
font-style 非常简单：用于在 normal 文本、italic 文本和 oblique 文本之间选择。唯一有点复杂的是明确 italic 文本和 oblique 文本之间的差别。
斜体（italic）是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜（oblique）文本则是正常竖直文本的一个倾斜版本。
通常情况下，italic 和 oblique 文本在 web 浏览器中看上去完全一样。 */
}
p.fontVariant{
    font-variant: small-caps; 
}
p.fontWeight{
    font-weight: 900;
}
/* 使用 em 来设置字体大小 */
/* 1em 等于当前的字体尺寸。如果一个元素的 font-size 为 16 像素，那么对于该元素，
1em 就等于 16 像素。在设置字体大小时，em 的值会相对于父元素的字体大小改变。
浏览器中默认的文本大小是 16 像素。因此 1em 的默认尺寸是 16 像素。
可以使用下面这个公式将像素转换为 em：pixels/16=em
（注：16 等于父元素的默认字体大小，假设父元素的 font-size 为 20px，那么公式需改为：pixels/20=em） */

/* 结合使用百分比和 EM */
p.fontSize{ 
    font-size: 2em;
}